#!/usr/bin/env python3
'''
Obsolete code search.
'''

import argparse
import os
import re
import sys


# NOTE: By excluding "tests" we get two benefits:
# (1) Tests themselves are not flagged as orphans anymore.
# (2) Orphan components that do have tests are flagged as orphans (because we
#     don't count references made from tests anymore).
EXCLUDE_DIRS = [
    'docs',
    '.git',
    'tests',
]


def _find_line(code, regex):
    '''
    Get line number for given regex.
    '''
    line_pos = 1
    for line in code.split('\n'):
        if re.match(regex, line):
            return line_pos
        line_pos += 1
    return -1


def _get_elements(file_path):
    '''
    Get classes, functions and methods from given file.
    '''
    classes = list()
    functions = list()
    methods = list()

    code = _get_code(file_path)

    # Get elements
    for element in re.findall(r'[\s\t]*class[\s]+(\w*)\(', code):
        classes.append(element)

    for element in re.findall(r'[\s\t]*def[\s]+(\w+)\([\s]*(\w*)', code):
        name = element[0]
        first_parameter = element[1]
        if first_parameter == 'self':
            if not name.startswith('__'):
                methods.append(name)
        else:
            functions.append(name)
    return (classes, functions, methods)


def _remove_matches(project_path, classes, functions, methods):
    '''
    Remove occurrences.
    '''
    for root, dirs, files in os.walk(project_path):
        # Modifying dirs in-place will prune the (subsequent) files and
        # directories visited by os.walk
        dirs[:] = [d for d in dirs if d not in EXCLUDE_DIRS]
        # Search matches
        if len(classes) + len(functions) + len(methods) == 0:
            break
        for file_python in files:
            file_python = os.path.join(os.path.realpath(root), file_python)
            classes, functions, methods = \
                _remove_file_matches(file_python, classes, functions, methods)
    return (classes, functions, methods)


def _get_code(file_path):
    '''
    Remove strings and comments from python file to avoid no relevant matches.
    '''
    file_open = open(file_path)
    code = file_open.read()
    file_open.close()
    # Removing multiple line comments
    # re.DOTALL include \n in . pattern
    code = re.sub(r"'''.*?'''", '', code, flags=re.DOTALL)
    code = re.sub(r'""".*?"""', '', code, flags=re.DOTALL)
    # Removing strings
    # Skipping escaped quotes
    code = code.replace('\\"', '{quote}')
    code = code.replace("\\'", '{quote}')
    code = re.sub(r"'.*?'", '', code)
    code = re.sub(r'".*?"', '', code)
    # Removing inline comments
    code = re.sub(r'#.*', '', code)
    return code


def _remove_definitions(code):
    '''
    Remove class, function and method definitions to avoid match to it self.
    '''
    # Removing class definitions
    # re.DOTALL include \n in . pattern
    # re.MULTILINE ^ matches at beginning or after every \n
    code = re.sub(r'^[\s\t]*class\s.*?\(', '\n\n{class_removed}(', code,
                  flags=re.DOTALL | re.MULTILINE)
    code = re.sub(r'^[\s\t]*super\(.*?\)', '\n\n{super_removed}', code,
                  flags=re.DOTALL | re.MULTILINE)
    # Removing function and method definitions
    code = re.sub(r'^[\s\t]*def\s.*?\(', '\n\n{def_removed}(', code,
                  flags=re.DOTALL | re.MULTILINE)
    return code


def _remove_file_matches(file_path, classes, functions, methods):
    '''
    Remove occurrences in file.
    '''
    if is_python(file_path) is True:
        code = _get_code(file_path)
        code = _remove_definitions(code)
        for class_name in classes[:]:
            # Class usage, e.g.:
            #   Class.class_attribute
            #   class NewClass(ClassA, ClassB)
            #   object = module.Class()
            #
            #   import Class as _Class
            #   object = _Class()
            #
            #   @Class()
            #   def function():
            if re.match(r'.*[\s\t.(]+[_]?[@]?{}[(.,)]+'.format(class_name),
                        code, flags=re.DOTALL):
                classes.remove(class_name)
        for function_name in functions[:]:
            # Function usage, e.g.:
            #   @authenticate('admin')
            #   dict[function()]
            #   msg.format(**_get_args_dict(args, func))
            #   celery_tasks.check_analyse_output.s()
            if re.match(r'.*[\s\t=+-.@(,\[\*]+{}[(),\s\t.]+'
                        .format(function_name), code, flags=re.DOTALL):
                functions.remove(function_name)
        for method_name in methods[:]:
            if re.match(r'.*[\s\t=+-.@(,]+{}[(),\s\t]+'
                        .format(method_name), code, flags=re.DOTALL):
                methods.remove(method_name)
    return (classes, functions, methods)


def checker(project_path, file_path):
    '''
    Check for orphan code.
    '''
    project_path = os.path.realpath(os.path.expanduser(project_path))
    file_path = os.path.realpath(os.path.expanduser(file_path))
    file_path_relative = file_path[len(project_path) + 1:]

    classes, functions, methods = _get_elements(file_path)

    # Check first self file
    classes, functions, methods = _remove_file_matches(file_path, classes, functions, methods)
    # Check project
    classes, functions, methods = _remove_matches(project_path, classes, functions, methods)

    # Print results
    file_open = open(file_path)
    code = file_open.read()
    file_open.close()
    for name in classes:
        line_pos = _find_line(code, r'^[\s\t]*class[\s]+{}\('.format(name))
        print_orphan(file_path_relative, line_pos, name, 'class')
    for name in functions:
        line_pos = _find_line(code, r'^[\s\t]*def[\s]+{}\('.format(name))
        print_orphan(file_path_relative, line_pos, name, 'function')
    for name in methods:
        line_pos = _find_line(code, r'^[\s\t]*def[\s]+{}\('.format(name))
        print_orphan(file_path_relative, line_pos, name, 'method')


def is_python(file_path):
    '''
    Check if file is a python file.
    '''
    if os.path.isfile(file_path) is False:
        return False
    if file_path.endswith('.py'):
        return True
    # Check also html files because Jinja templates
    if file_path.endswith('.html'):
        return True
    _, extension = os.path.splitext(file_path)
    if extension != '':
        return False
    file_open = open(file_path)
    first_line = file_open.readline(50)
    file_open.close()
    if '#!' in first_line and 'python' in first_line:
        return True
    return False


def main(project_path, file_path):
    '''
    Launcher manager.
    '''
    if file_path is None:
        file_path = project_path

    if os.path.isfile(file_path) is True:
        checker(project_path, file_path)
    elif os.path.isdir(file_path) is True:
        for root, dirs, files in os.walk(file_path):
            # Modifying dirs in-place will prune the (subsequent) files and
            # directories visited by os.walk
            dirs[:] = [d for d in dirs if d not in EXCLUDE_DIRS]
            for file_python in files:
                file_python = os.path.join(os.path.realpath(root), file_python)
                if is_python(file_python) is True:
                    checker(project_path, file_python)
    else:
        print('Wrong file or path !')


def parse_arguments(argv):
    '''
    Command line arguments parser.
    '''
    parser = argparse.ArgumentParser(description='Orphan python code checker.')
    parser.add_argument('project_path', type=str, help='Project path')
    parser.add_argument('file_path', type=str, nargs='?', help='Tarjet file if required')
    return parser.parse_args(argv[1:])


def print_orphan(file_path, line_pos, name, element_type):
    '''
    Print parseable error.
    '''
    print('{}:{}: Orphan {} {}'.format(file_path, line_pos, element_type, name))


if __name__ == '__main__':
    ARGS = parse_arguments(sys.argv)
    main(ARGS.project_path, ARGS.file_path)
